module.exports = async function(work) {
	const websites = require('./siteconfigs.js');
	const minify = require('html-minifier').minify;
	var puppeteer;
	const now = Date.now();
	const fs = require('fs');
	const {URL} = require('url');
	const md5 = require('md5');
	const cache = {
		dir: './data/cache/',
		dirHost: './data/cache/'+new URL(work.url).hostname+'/',
		dirFile: './data/cache/'+new URL(work.url).hostname+'/'+md5(work.url)+'.txt'
	};
	var pageCreatedByGraby = false;

	if (!work.siteconfig) {
		work.siteconfig = new URL(work.url).hostname;
	}

	return new Promise(async(resolve, reject) => {
		if (work.cache && fs.existsSync(cache.dirFile)) {
			console.log('>> Retrieved from cache ('+cache.dirFile+')')
			return resolve(JSON.parse(fs.readFileSync(cache.dirFile, 'utf8')));
		}

		if (!work.browser) {
			puppeteer = require('puppeteer');
			work.browser = await puppeteer.launch({
				//args: ['--disable-web-security']
				// headless: false,
				// devtools: true,
				// userDataDir: './data/userdata'
			});
		}
		if (!work.page) {
			pageCreatedByGraby = true;
			work.page = await work.browser.newPage();
		}

		if (work.siteconfig && websites.hosts[work.siteconfig]) {
			website = websites.hosts[work.siteconfig];
		} else {
			website = {auth: {}};
		}

		if (website.cookies) {
			Object.keys(website.cookies).forEach(function(key) {
				var cookie = website.cookies[key];
				var obj = {name: key};

				if (typeof(cookie) === 'string') {
					obj.value = key;
				} else {
					var params = ['value', 'url', 'domain', 'path', 'expires', 'httpOnly', 'secure', 'sameSite'];
					params.forEach(function(param) {
						if (!cookie[param]) {
							return;
						}

						obj[param] = cookie[param];
					});
				}

				work.page.setCookie(obj);
			});
		}

		var auth = async function(page, nb) {
			if (!nb || typeof(nb) !== 'number') { nb = 0; }
			var max = website.auth.maxTries || 2;
			//console.log('Check login '+nb+'/'+max);

			try {
				await page.goto(work.url, {waitUntil: 'networkidle2', timeout: 20000});
			} catch (e) {}

			page.waitFor(2000);
			if (nb > max) {
				console.log('Nb of tries > max ('+nb+'/'+max+')');
				return;
			}
			console.log('> Page loaded. Check auth…');

			try {
				var logged = await website.auth.check(page);
			} catch (e) {
				console.log('!! Error in CheckAuth. Try again…');
				nb++;
				await page.waitFor(2000);
				return await auth(page, nb);
			}
			console.log('> Auth: '+logged+' !');
			await page.waitFor(2000);

			if (!logged) {
				nb++;
				await website.auth.login(website.auth.data, page, work.url);
				await page.waitFor(2000);
				return await auth(page, nb);
			}

			return true;
		};

		if (website.auth && website.auth.login) {
			/* Loading the website with authentication… */
			await auth(work.page);
		} else {
			/* Loading the website without authentication… */
			try {
				await work.page.goto(work.url, {waitUntil: 'networkidle2', timeout: 20000});
			} catch (e) {}
		}
		console.log('> Page loaded.');
		work.page.waitFor(3000);

		if (website.selectors && website.selectors.remove) {
			await work.page.evaluate(function(selectors) {
				if (!selectors || !Array.isArray(selectors)) {
					return;
				}

				selectors.forEach(function(selector) {
					var els = Array.from(document.querySelectorAll(selector));
					els.forEach(function(el) {
						el.remove();
					});
				});
			}, website.selectors.remove);
		};

		console.log('> Exposing grabyExport()');
		await work.page.exposeFunction('grabyExport', async function(content) {
			if (typeof content === 'string') {
				content = JSON.parse(content);
			}

			if (content && content.content) {
				try {
					content.content = minify(content.content, {
						removeComments: true,
						collapseBooleanAttributes: true,
						collapseWhitespace: true,
						conservativeCollapse: true,
						decodeEntities: true,
						includeAutoGeneratedTags: false,
						keepClosingSlash: true,
						sortAttributes: true,
						sortClassName: true,
						useShortDoctype: true,
						removeRedundantAttributes: true,
						removeScriptTypeAttributes: true,
						removeStyleLinkTypeAttributes: true
					});
				} catch (e) {
					console.log('!! Minification failed!');
				}
			}

			content.timeElapsed = Date.now() - now;

			if (pageCreatedByGraby) {
				setTimeout(function(currentPage) { if (!currentPage) { return; } currentPage.close(); }, 1000*50, work.page);
				//await work.page.close();
			}
			if (puppeteer && work.browser) {
				await work.browser.close();
			}

			if (work.cache) {
				if (!fs.existsSync(cache.dir)){
					fs.mkdirSync(cache.dir);
				}
				if (!fs.existsSync(cache.dirHost)){
					fs.mkdirSync(cache.dirHost);
				}

				content.cachedAt = Date.now();
				fs.writeFileSync(cache.dirFile, JSON.stringify(content));
			}

			delete content.cachedAt;
			return resolve(content);
			//work.browser.close();
		});

		if (website.page) {
			console.log('> Page script evaluating…');
			await work.page.evaluate(website.page.toString());
			console.log('> Page script evaluated.');
		}

		await work.page.addScriptTag({'path': './reader.js'});

		if (website.screenshot) {
			await work.page.screenshot({path: 'screenshot.png'});
		}
	});
};

(async function() {
	if (require && require.main === module) {
		var args = process.argv;
		args.shift(); args.shift();

		if (args[0] && args[0].indexOf('http') === 0) {
			console.log(JSON.stringify(await module.exports({url: args[0], cache: true})));
		} else {
			let urls = [
				'https://www.nextinpact.com/news/104101-plongee-dans-wallabag-alternative-libre-a-pocket.htm',
				'https://www.nextinpact.com/brief/wallabag-2-3-est-accessible-a-tous--avec-sa-gestion-des-paywall-1795.htm',
				'https://www.numerama.com/tech/160115-le-pocket-libre-wallabag-fait-le-plein-de-fonctionnalites.html',
				'https://www.lesechos.fr/tech-medias/hightech/0301490735182-cambridge-analytica-firefox-ajoute-une-fonctionnalite-pour-isoler-facebook-2164631.php',
				'http://www.cnetfrance.fr/news/qwant-junior-le-moteur-de-recherche-concu-pour-les-enfants-arrive-sur-ios-et-android-39866090.htm'
			];

			console.log('Usage:');
			console.log('	node graby.js {url}');
			console.log('Example:');
			console.log('	node graby.js '+urls[Math.round(Math.random() * (urls.length - 1))]);
		}
	}
})();
